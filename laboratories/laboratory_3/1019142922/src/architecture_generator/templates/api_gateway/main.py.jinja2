from fastapi import FastAPI, Depends, HTTPException, status, Request
from fastapi.middleware.cors import CORSMiddleware
import json
from pathlib import Path
from typing import Optional
import httpx
import asyncio

app = FastAPI(
    title="API Gateway",
    description="Unified API Gateway for the system"
)

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Dummy API key for demonstration
API_KEY = "dummy-api-key-123"

async def verify_api_key(api_key: Optional[str] = None):
    if api_key != API_KEY:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API Key"
        )
    return True

# Load routes from configuration
def load_routes():
    config_path = Path("api_gateway.json")
    if not config_path.exists():
        return []
    
    with config_path.open() as f:
        config = json.load(f)
    return config.get("routes", [])

# Create an async HTTP client
async def get_http_client():
    async with httpx.AsyncClient() as client:
        yield client

# Create routes dynamically
for route in load_routes():
    async def create_route_handler(
        request: Request,
        client: httpx.AsyncClient = Depends(get_http_client),
        route=route
    ):
        # Forward the request to the target service
        try:
            # Get the request body if it exists
            body = await request.body()
            
            # Forward headers (excluding host and content-length)
            headers = {
                k: v for k, v in request.headers.items()
                if k.lower() not in ['host', 'content-length']
            }
            
            # Make the request to the target service
            response = await client.request(
                method=route["method"],
                url=route["target"],
                headers=headers,
                content=body,
                timeout=30.0
            )
            
            # Return the response from the target service
            return response.json()
            
        except httpx.RequestError as e:
            raise HTTPException(
                status_code=status.HTTP_502_BAD_GATEWAY,
                detail=f"Error forwarding request: {str(e)}"
            )

    # Add authentication dependencies based on route configuration
    dependencies = []
    if "api_key" in route.get("auth_methods", []):
        dependencies.append(Depends(verify_api_key))

    # Create the route
    app.add_api_route(
        path=route["path"],
        endpoint=create_route_handler,
        methods=[route["method"]],
        dependencies=dependencies
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 