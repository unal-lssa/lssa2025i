Model:
    'architecture' ':'
        elements*=Element
;

Element:
      Network | Component | Connector
;

Network:
    'network' name=ID
    ('{'
        ('internal')?
        ( 'driver' '=' driver=STRING )?
    '}')?
;

Component:
      loadbalancer | StandardComponent | Database | ApiGateway | Queue
;

LoadBalancer:
    'component' 'loadbalancer'
        name=ID
        instanceCount=INT
        target=[Component]
        'network' network=[Network]
        ('ports' ':' portMappings+=PortMapping (',' portMappings+=PortMapping)*)?
;

PortMapping:
    (hostPort=INT ':' containerPort=INT)
  | containerPort=INT
;

StandardComponent:
    'component' type=StandardComponentType
        name=ID
        'network' network=[Network]
        ('ports' ':' portMappings+=PortMapping (',' portMappings+=PortMapping)*)?
;

StandardComponentType:
      'frontend' | 'backend' | 'bucket' | 'cdn'
;

Database:
    'component' 'db'
        name=ID
        databaseType=DatabaseType
        'network' network=[Network]
        ('ports' ':' portMappings+=PortMapping (',' portMappings+=PortMapping)*)?
;

DatabaseType:
      'postgresql' | 'mongodb' | 'elasticsearch'
;

ApiGateway:
    'component' 'api_gateway'
        name=ID
        'auth' auth=[Component]
        'networks' networks+=[Network] (',' networks+=[Network])*
        ('ports' ':' portMappings+=PortMapping (',' portMappings+=PortMapping)*)?
;

Queue:
    'component' 'queue' name=ID
        'partitions' partitions=INT
        'replication' replication=INT
        'network' network=[Network]
        ('ports' ':' portMappings+=PortMapping (',' portMappings+=PortMapping)*)?
;

ConnectorType:
    'http' | 'db_connector' | 'queue_connector'
;

Connector:
    'connector' type=ConnectorType
        from=[Component] '->' to=[Component]
;
