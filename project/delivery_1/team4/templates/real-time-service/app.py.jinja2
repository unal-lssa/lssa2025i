import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
import random
import string

app = FastAPI()

rooms = {}  # room_id -> {"players": [ws1, ws2], "board": list, "turn": "X"}
players_online = set()

def generate_room_code(length=5):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    players_online.add(websocket)
    await broadcast_players_online()

    room_id = None
    player_mark = None

    try:
        # Find or create room
        for rid, room in rooms.items():
            if len(room["players"]) < 2:
                room_id = rid
                break
        if not room_id:
            room_id = generate_room_code()
            rooms[room_id] = {"players": [], "board": [""] * 9, "turn": "X"}

        room = rooms[room_id]
        room["players"].append(websocket)
        await websocket.send_text(f"ROOM,{room_id}")

        if len(room["players"]) == 1:
            player_mark = "X"
            await websocket.send_text(f"PLAYER,{player_mark}")
        elif len(room["players"]) == 2:
            player_mark = "O"
            await websocket.send_text(f"PLAYER,{player_mark}")

            # Notify both players that game starts
            for player in room["players"]:
                await player.send_text("START")

        while True:
            data = await websocket.receive_text()
            index_str, mark = data.split(",")
            index = int(index_str)

            if room["board"][index] == "" and room["turn"] == mark:
                room["board"][index] = mark
                # Switch turn
                room["turn"] = "O" if mark == "X" else "X"

                for player in room["players"]:
                    await player.send_text(f"{index},{mark}")

                result = check_winner(room["board"])
                if result:
                    for player in room["players"]:
                        await player.send_text(f"END,{result}")
                    room["board"] = [""] * 9
                    room["turn"] = "X"  # Reset turn after game
    except WebSocketDisconnect:
        players_online.discard(websocket)
        if room_id and room_id in rooms:
            room = rooms[room_id]
            if websocket in room["players"]:
                room["players"].remove(websocket)
            if not room["players"]:
                del rooms[room_id]
        await broadcast_players_online()

async def broadcast_players_online():
    count = len(players_online)
    disconnected = []
    for player in players_online:
        try:
            await player.send_text(f"PLAYERS,{count}")
        except:
            disconnected.append(player)
    for player in disconnected:
        players_online.discard(player)

def check_winner(board):
    win_positions = [
        (0,1,2), (3,4,5), (6,7,8),
        (0,3,6), (1,4,7), (2,5,8),
        (0,4,8), (2,4,6)
    ]
    for a,b,c in win_positions:
        if board[a] == board[b] == board[c] and board[a] != "":
            return f"{board[a]} wins!"

    if all(cell != "" for cell in board):
        return "Draw!"

    return None

if __name__ == "__main__":
    uvicorn.run("server:app", host="0.0.0.0", port=8000, reload=True)
